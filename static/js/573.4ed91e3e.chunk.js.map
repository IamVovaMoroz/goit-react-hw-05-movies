{"version":3,"file":"static/js/573.4ed91e3e.chunk.js","mappings":"gRA8RA,EA5DmB,WAAO,IAAD,EACjBA,GAAWC,EAAAA,EAAAA,MACjB,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAK,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GAC3C,GAAkCP,EAAAA,EAAAA,WAAS,GAA3C,eAAOQ,EAAP,KAAkBC,EAAlB,KAgBMC,EAAe,WACnBD,GAAa,IACbE,EAAAA,EAAAA,IAAUL,GACPM,MAAK,SAACC,GACLX,EAAUW,EAAKC,SACfL,GAAa,EACd,IACAM,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,EAAvB,GACV,EAGKG,EAAkC,IAAlBlB,EAAOmB,OAE7B,OACE,4BACE,kBAAMC,SA5Be,SAACC,GACxBA,EAAMC,iBACDjB,EAILI,IAHEc,EAAAA,GAAAA,MAAY,8BAIf,EAqBG,WACE,kBAAOC,KAAK,OAAOC,MAAOpB,EAAOqB,SApBb,SAACC,GACzBvB,EAAgB,CAAEC,MAAOsB,EAAIC,OAAOH,OACrC,KAmBK,mBAAQI,UAAU,SAASL,KAAK,SAAhC,SAAyC,cAI1CjB,IAAa,0BAAK,iBAAMsB,UAAU,aAElCX,IAAkBX,IACjB,yBAAK,qBAEP,wBACGP,EAAO8B,KAAI,SAACC,GAAD,OACV,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKD,EAAME,IAAMC,MAAO,CAAEC,KAAMtC,GAAxC,SACGkC,EAAMK,SAFFL,EAAME,GADL,QAUnB,C,mJC3RKI,EAAU,mCAGHC,EAAW,mCAAG,oGACAC,EAAAA,EAAAA,IAAU,kDAAmD,CAClFC,OAAQ,CACNC,QAASJ,EACTK,SAAU,SAEZC,QAAS,CACPC,OAAQ,sBAPW,cACjBC,EADiB,yBAUhBA,EAASjC,MAVO,2CAAH,qDAcXF,EAAS,mCAAG,WAAML,GAAN,uFACEkC,EAAAA,EAAAA,IAAU,4CAA6C,CAC5EC,OAAQ,CACNC,QAASJ,EACTK,SAAU,QACVI,KAAM,EACNC,eAAe,EACf1C,MAAOA,GAETsC,QAAS,CACPC,OAAQ,sBAVS,cACfC,EADe,yBAadA,EAASjC,MAbK,2CAAH,sDAiBb,SAAeoC,EAAtB,+CAAO,OAAP,oBAAO,WAA+Bf,GAA/B,gFACCgB,EADD,6CAC6ChB,EAD7C,mCAC0EI,GAD1E,kBAIoBE,EAAAA,EAAAA,IAAUU,EAAK,CACpCN,QAAS,CACPC,OAAQ,sBANT,cAIGC,EAJH,yBAUIA,EAASjC,MAVb,2H","sources":["components/pages/MoviesPage.jsx","services/Api.jsx"],"sourcesContent":["// import React from 'react';\n// import { useEffect, useState } from 'react';\n// import { Link, useLocation, useSearchParams } from 'react-router-dom';\n\n// import { toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n// import { getTrending } from 'services/Api';\n// import './MoviesPage.css';\n\n\n// const MoviesPage = () => {\n// // получаем масив фильмов с сервера\n// // добавляем определение местоположения для возврата сюда\n// const location = useLocation()\n// const [movies, setMovies] = useState([]);\n// // searchParams - аткуальное значение из url , setSearchParams - меняет url. Добавлением обьекта\n// const [searchParams, setSearchParams] = useSearchParams()\n// // если нет query то пустая строка, чтобы небыло ошибки\n// const query = searchParams.get(\"query\") ?? \"\"\n// const [isLoading, setIsLoading] = useState(false);\n\n//   // можно получить значение из url с помощью метода searchParams.get(\"a\")) a - ключ, значение которого нам нужно получить послезнака вопроса\n//   // http://localhost:3000/goit-react-hw-05-movies/movies?a=5&b=10\n//   // searchParams.get(\"a\") =>  5\n// // console.log(searchParams.get(\"a\")) \n// // по типу state, записываем значение Query в const и доавляем как value input. Для сохранения значения введённого пользователем в input\n\n\n// console.log(query)\n// // useEffect(() => {\n\n\n// //   return () => {\n// //    http запрос\n// //   };\n// // }, [query])\n\n\n// useEffect(() => {\n\n\n//   setIsLoading(true);\n\n//   const response = getTrending();\n//   response.then(data =>{\n\n  \n\n\n//     // setMovies(data.results);\n  \n//     setIsLoading(false);\n//   } ).catch(error => console.log(error));\n\n// }, [movies, query]);\n\n\n\n// const updateQueryString = evt => {\n//   // если evt.target.value \"\" записываем{} если есть то значение\n//   if(evt.target.value === \"\"){\n//    return setSearchParams({})\n//   }\n  \n//   setSearchParams({query: evt.target.value})\n// }\n\n// // const visibleMovies = movies.filter( movie => movie.includes(query))\n\n\n\n\n\n// console.log(location)\n//   return (\n//     <div>\n\n//       <input type=\"text\" value={query} onChange={updateQueryString} />\n\n//       <button className='button' onClick={()=> setSearchParams({})}>Clear Search</button>\n      \n//       <ul>\n//       {/* {movies.map( movie => { visibleMovies*/ }\n//      {movies.map( movie => {\n//       // `${movie}` чтобы прописать путь url и для строк и цифр для получаемых. Link - активная ссылку\n//       return (\n//       <li key={movie}>\n//       <Link  to={`${movie}`} state={{from:location}}>{movie}</Link>\n//       </li>\n//       );\n//       })}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default MoviesPage\n\n// import React, { useEffect, useState } from 'react';\n// import { Link, useLocation, useSearchParams } from 'react-router-dom';\n// import { toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n// import { getTrending, getMovies } from 'services/Api';\n// import './MoviesPage.css';\n\n// const MoviesPage = () => {\n//   const location = useLocation();\n//   const [movies, setMovies] = useState([]);\n//   const [searchParams, setSearchParams] = useSearchParams();\n//   const query = searchParams.get('query') ?? '';\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   useEffect(() => {\n//     setIsLoading(true);\n//     const response = query ? getMovies(query) : getTrending();\n//     response\n//       .then((data) => {\n//         setMovies(data.results);\n        \n//         setIsLoading(false);\n//       })\n//       .catch((error) => console.log(error));\n//   }, [query]);\n\n//   const updateQueryString = (evt) => {\n//     setSearchParams({ query: evt.target.value });\n//   };\n\n//   const searchMovies = () => {\n//     // Выполнять дополнительную логику поиска фильмов\n//     // Например, обновить список фильмов на основе запроса\n//     // Или выполнить другие действия, связанные с поиском фильмов\n//     console.log('Searching movies...');\n//   };\n\n//   return (\n//     <div>\n//       <input type=\"text\" value={query} onChange={updateQueryString} />\n//       <button className=\"button\" onClick={searchMovies}>\n//         Search\n//       </button>\n//       <ul>\n//         {movies.map((movie) => (\n//           <li key={movie.id}>\n//             <Link to={`${movie.id}`} state={{ from: location }}>\n//               {movie.title}\n//             </Link>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default MoviesPage;\n\n// import React, {  useState } from 'react';\n// import { Link, useLocation, useSearchParams } from 'react-router-dom';\n// import { toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n// import { getMovies } from 'services/Api';\n// import './MoviesPage.css';\n\n// const MoviesPage = () => {\n//   const location = useLocation();\n//   const [movies, setMovies] = useState([]);\n//   const [searchParams, setSearchParams] = useSearchParams();\n//   const query = searchParams.get('query') ?? '';\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   const handleFormSubmit = (event) => {\n//     event.preventDefault();\n//     if (!query) {\n//       toast.error('Please enter a search query'); // Выводим сообщение об ошибке при пустом запросе\n//       return;\n//     }\n//     searchMovies();\n//   };\n\n//   const updateQueryString = (evt) => {\n//     setSearchParams({ query: evt.target.value });\n//   };\n\n//   const searchMovies = () => {\n//     setIsLoading(true);\n//     getMovies(query)\n//       .then((data) => {\n//         setMovies(data.results);\n//         setIsLoading(false);\n//       })\n//       .catch((error) => console.log(error));\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleFormSubmit}>\n//         <input type=\"text\" value={query} onChange={updateQueryString} />\n//         <button className=\"button\" type=\"submit\">\n//           Search\n//         </button>\n//       </form>\n//       {isLoading && <div>Loading...</div>}\n//       <ul>\n//         {movies.map((movie) => (\n//           <li key={movie.id}>\n//             <Link to={`${movie.id}`} state={{ from: location }}>\n//               {movie.title}\n//             </Link>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default MoviesPage;\n\nimport React, { useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { getMovies } from 'services/Api';\nimport './MoviesPage.css';\nimport \"../Spinner/spinner.css\"\n\n\nconst MoviesPage = () => {\n  const location = useLocation();\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n  const [isLoading, setIsLoading] = useState(false);\n\n\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n    if (!query) {\n      toast.error('Please enter a search query');\n      return;\n    }\n    searchMovies();\n  };\n\n  const updateQueryString = (evt) => {\n    setSearchParams({ query: evt.target.value });\n  };\n\n  const searchMovies = () => {\n    setIsLoading(true);\n    getMovies(query)\n      .then((data) => {\n        setMovies(data.results);\n        setIsLoading(false);\n      })\n      .catch((error) => console.log(error));\n  };\n\n  // Проверяем, является ли массив movies пустым\n  const isMoviesEmpty = movies.length === 0;\n\n  return (\n    <div>\n      <form onSubmit={handleFormSubmit}>\n        <input type=\"text\" value={query} onChange={updateQueryString} />\n        <button className=\"button\" type=\"submit\">\n          Search\n        </button>\n      </form>\n      {isLoading && <div><span className=\"loader\"></span></div>}\n      {/* если массив пустой и нет загрузки уже - выводим сообщение */}\n      {isMoviesEmpty && !isLoading && (\n        <div>No movies found</div>\n      )}\n      <ul>\n        {movies.map((movie) => (\n          <li key={movie.id}>\n            <Link to={`${movie.id}`} state={{ from: location }}>\n              {movie.title}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default MoviesPage;\n\n","import axios from 'axios';\nconst API_KEY = 'a148ed5961285512fd3954af576af4a0';\n\n// популярное\nexport const getTrending = async () => {\n    const response = await axios.get('https://api.themoviedb.org/3/trending/movie/day', {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n      },\n      headers: {\n        Accept: 'application/json',\n      },\n    });\n    return response.data;\n  };\n\n//   запрос по ключевому слову\nexport const getMovies = async query => {\n    const response = await axios.get('https://api.themoviedb.org/3/search/movie', {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n        page: 1,\n        include_adult: false,\n        query: query,\n      },\n      headers: {\n        Accept: 'application/json',\n      },\n    });\n    return response.data;\n  };\n\n  // делати фильмв\n  export async function getMovieDetails(id) {\n    const url = `https://api.themoviedb.org/3/movie/${id}?language=en-US&api_key=${API_KEY}`;\n  \n    try {\n      const response = await axios.get(url, {\n        headers: {\n          Accept: 'application/json',\n        },\n      });\n  \n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n\n\n  export const getMovieCredits = async movieId => {\n    const response = await axios.get(\n      `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n  };\n  \n  export const getMovieReviews = async movieId => {\n    const response = await axios.get(\n      `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n  };\n  \n "],"names":["location","useLocation","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","query","get","isLoading","setIsLoading","searchMovies","getMovies","then","data","results","catch","error","console","log","isMoviesEmpty","length","onSubmit","event","preventDefault","toast","type","value","onChange","evt","target","className","map","movie","to","id","state","from","title","API_KEY","getTrending","axios","params","api_key","language","headers","Accept","response","page","include_adult","getMovieDetails","url"],"sourceRoot":""}