{"version":3,"file":"static/js/41.099e732d.chunk.js","mappings":"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","sources":["components/MovieCard/MovieCard.styled.jsx","components/MovieCard/MovieCard.jsx","components/pages/MovieDetails.jsx","services/Api.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const MovieCardInfo = styled.div`\n  display: flex;\n  flex-direction: row;\n  padding-right: 30px;\n  padding-left: 30px;\n  padding-top: 30px;\n`;\nexport const Img = styled.img`\n  width: 200px;\n  height: auto;\n  object-fit: cover;\n  display: block;\n  margin-right: 20px;\n`;\n\nexport const MovieTitle = styled.h1`\n  font-size: 20px;\n  font-weight: 800;\n  margin-bottom: 10px;\n`;\nexport const Score = styled.p`\n  color: darkgrey;\n`;\nexport const Title = styled.h3`\n  font-size: 18px;\n  font-weight: 800;\n  margin-top: 10px;\n  margin-bottom: 5px;\n`;\n\nexport const AddInfo = styled.div`\n  margin-top: 22px;\n`;\n\nexport const CartNav = styled.nav`\n  display: flex;\n`;\nexport const StyledNavLink = styled(NavLink)`\n  margin-right: 20px;\n  text-transform: uppercase;\n`;\n\nexport const Button = styled.button`\n  font-size: 16px;\n  text-transform: uppercase;\n  width: 70px;\n  margin-top: 10px;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  border: none;\n  /* border-bottom: solid 3px tomato; */\n  background-color: #fff;\n  cursor: pointer;\n  position: relative;\n  transition: color 0.3s;\n  \n\n  &:hover {\n    color: grey;\n\n    &::before {\n      content: '';\n      position: absolute;\n      width: 100%;\n      height: 3px;\n      background-color: blue;\n      bottom: -3px;\n      left: 0;\n      animation: underlineAnim 0.3s forwards;\n    }\n  }\n\n  @keyframes underlineAnim {\n    0% {\n      width: 0;\n    }\n    100% {\n      width: 100%;\n    }\n  }\n`;","// import {\n//     MovieCardInfo,\n//     Img,\n//     MovieTitle,\n//     Score,\n//     Title,\n//     AddInfo,\n//     CartNav,\n//     StyledNavLink,\n//     Button,\n//   } from './MovieCard.styled';\n// //   import { Container, Section } from 'components/App.styled';\n//   import noImage from '../../NoImage.jpg';\n  \n//   export const MovieCard = ({ movieInfo }) => {\n//     const getReleaseYear = (releaseDate) => {\n//       const date = new Date(releaseDate);\n//       return date.getFullYear();\n//     };\n  \n//     const getGenres = (arrGenres) => {\n//       return arrGenres.map((genre) => genre.name).join(', ');\n//     };\n  \n//     return (\n//       <div>\n//         <div>\n//           <MovieCardInfo>\n//             <div>\n//               {movieInfo.poster_path ? (\n//                 <Img\n//                   alt={movieInfo.title}\n//                   src={`https://image.tmdb.org/t/p/w500/${movieInfo.poster_path}`}\n//                   width={`100`}\n//                 />\n//               ) : (\n//                 <Img src={noImage} alt=\" poster is not available\" />\n//               )}\n//             </div>\n  \n//             <div>\n//               <MovieTitle>\n//                 {movieInfo.title}\n//                 <p>({getReleaseYear(movieInfo.release_date)})</p>\n//               </MovieTitle>\n//               <Score> User Score: {~~(movieInfo.vote_average * 10)}%</Score>\n//               <Title>Overview</Title>\n//               <p>{movieInfo.overview}</p>\n//               <div>\n//                 <Title>Genres</Title>\n//                 <p>{getGenres(movieInfo.genres)}</p>\n//               </div>\n  \n//               <AddInfo>\n//                 <Title>Additional Information</Title>\n//                 <CartNav>\n//                   <StyledNavLink to={`cast`}>\n//                     <Button>Cast</Button>\n//                   </StyledNavLink>\n  \n//                   <StyledNavLink to={`reviews`}>\n//                     <Button>Reviews</Button>\n//                   </StyledNavLink>\n//                 </CartNav>\n//               </AddInfo>\n//             </div>\n//           </MovieCardInfo>\n//         </div>\n//       </div>\n//     );\n//   };\n  \n//   export default MovieCard;\n\nimport React from 'react';\nimport {\n  MovieCardInfo,\n  Img,\n  MovieTitle,\n  Score,\n  Title,\n  AddInfo,\n  CartNav,\n  StyledNavLink,\n  Button,\n} from './MovieCard.styled';\nimport noImage from '../../NoImage.jpg';\n\nconst MovieCard = ({ movieInfo }) => {\n  if (!movieInfo) {\n    return null; // Возвращаем null, если movieInfo равно null или undefined\n  }\n\n  const getReleaseYear = (releaseDate) => {\n    const date = new Date(releaseDate);\n    return date.getFullYear();\n  };\n\n  const getGenres = (arrGenres) => {\n    return arrGenres.map((genre) => genre.name).join(', ');\n  };\n\n  const posterPath = movieInfo.poster_path\n    ? `https://image.tmdb.org/t/p/w500/${movieInfo.poster_path}`\n    : noImage;\n\n  return (\n    <div>\n      <div>\n        <MovieCardInfo>\n          <div>\n            <Img alt={movieInfo.title} src={posterPath} width={100} />\n          </div>\n\n          <div>\n            <MovieTitle>\n              {movieInfo.title}\n              <p>({getReleaseYear(movieInfo.release_date)})</p>\n            </MovieTitle>\n            <Score> User Score: {~~(movieInfo.vote_average * 10)}%</Score>\n            <Title>Overview</Title>\n            <p>{movieInfo.overview}</p>\n            <div>\n              <Title>Genres</Title>\n              <p>{getGenres(movieInfo.genres)}</p>\n            </div>\n\n            <AddInfo>\n              <Title>Additional Information</Title>\n              <CartNav>\n                <StyledNavLink to={`cast`}>\n                  <Button>Cast</Button>\n                </StyledNavLink>\n\n                <StyledNavLink to={`reviews`}>\n                  <Button>Reviews</Button>\n                </StyledNavLink>\n              </CartNav>\n            </AddInfo>\n          </div>\n        </MovieCardInfo>\n      </div>\n    </div>\n  );\n};\n\nexport default MovieCard;","\n// import React, { useRef, useState, useEffect } from 'react'\n// import { Outlet, useParams, useLocation, Link } from 'react-router-dom'\n// import { Suspense } from 'react'\n// import { getMovieDetails } from 'services/Api'\n\n\n// function MovieDetails() {\n   \n//     const location = useLocation()\n//     const backLinkLocationRef = useRef(location.state?.from ?? \"/movies\")\n//     // useParams получаем значение id фильма\n//      const {movieId} = useParams()\n//   // тут получаем id фильма\n//     console.log(movieId)\n\n// const [movieInfo, setMovieInfo] = useState(null); // Состояние для хранения информации о фильме\n// const [loading, setLoading] = useState(true); // Состояние для отслеживания состояния загрузки\n// const [error, setError] = useState(null); // Состояние для отслеживания ошибок\n  \n\n// useEffect(() => {\n//   const fetchMovieDetails = async () => {\n//     // setLoading(true);\n//     try {\n//       const data = await getMovieDetails(movieId); // Выполняем запрос на сервер для получения информации о фильме\n//       setMovieInfo(data); // Обновляем состояние с полученными данными\n//       setLoading(false); // Устанавливаем состояние загрузки на false, после запроса\n//     } catch (error) {\n//       setError(error); // Устанавливаем состояние ошибки, если ошибка\n//       setLoading(false); // Устанавливаем состояние загрузки на false, если запрос завершился с ошибкой\n//     }\n//   };\n\n//   fetchMovieDetails(); // Вызываем функцию для выполнения запроса при монтировании компонента и при изменении ID фильма\n// }, [movieId]);\n// //   тут делаем http апрос по id. state, loading, error\n\n//     return (\n//     <>\n//         <h2>MoviesDetails: {movieId}</h2>\n//         {/* добавляем кнопку для возврата, если усть location , добавляем  location.state.from*/}\n//         <Link to={backLinkLocationRef.current}>Go back to movies collection</Link>\n//         <ul>\n//             <li>\n//                 {/* to=\"Cast\" путь подкомпонента */}\n//                 <Link to=\"Cast\">Cast info</Link>\n//                             </li>\n//             <li>\n//                 <Link to=\"Reviews\">Reviews info</Link>\n//             </li>\n//         </ul>\n//         {/* вставляем Outlet если нужно рендерить от родителя доп компоненты,в app проложили путь и тут разметку + Outlet */}\n\n//          <Suspense fallback={<div>Loading...</div>}>\n//       <Outlet />\n//       </Suspense>\n//         </>\n//   )\n// }\n\n// export default MovieDetails\n// import React, { useRef, useState, useEffect } from 'react';\n// import { Outlet, useParams, useLocation, Link } from 'react-router-dom';\n// import { Suspense } from 'react';\n// import \"../Spinner/spinner.css\"\n// import { getMovieDetails } from 'services/Api' // Импортируем функцию getMovieDetails из файла API (замените 'your-api-file' на правильный путь к вашему файлу)\n\n// function MovieDetails() {\n//   const location = useLocation();\n//   const backLinkLocationRef = useRef(location.state?.from ?? '/movies');\n//   const { movieId } = useParams();\n//   const [movieInfo, setMovieInfo] = useState(null); // Состояние для хранения информации о фильме\n//   const [loading, setLoading] = useState(false); // Состояние для отслеживания состояния загрузки\n//   const [error, setError] = useState(null); // Состояние для отслеживания ошибок\n\n//   useEffect(() => {\n//     const fetchMovieDetails = async () => {\n//       try {\n//         const data = await getMovieDetails(movieId); // Выполняем запрос на сервер для получения информации о фильме\n//         setMovieInfo(data); // Обновляем состояние с полученными данными\n//         setLoading(false); // Устанавливаем состояние загрузки на false, так как запрос выполнен успешно\n//       } catch (error) {\n//         setError(error); // Устанавливаем состояние ошибки \n//         setLoading(false); // Устанавливаем состояние загрузки на false, так как запрос завершился с ошибкой\n//       }\n//     };\n\n//     fetchMovieDetails(); // Вызываем функцию для выполнения запроса при монтировании компонента и при изменении ID фильма\n//   }, [movieId]);\n\n//   // Проверяем состояние загрузки и ошибки\n//   if (loading) {\n//     return <div>Loading...</div>; // Отображаем сообщение о загрузке, пока данные фильма загружаются\n//   }\n\n//   if (error) {\n//     return <div>Error: {error.message}</div>; // Отображаем сообщение об ошибке, если произошла ошибка при выполнении запроса\n//   }\n\n//   // Отображаем информацию о фильме и дочерние компоненты\n//   return (\n//     <>\n//       <h2>MovieDetails: {movieId}</h2>\n//       <Link to={backLinkLocationRef.current}>Go back to movies collection</Link>\n//       <ul>\n//         <li>\n//           <Link to=\"Cast\">Cast info</Link>\n//         </li>\n//         <li>\n//           <Link to=\"Reviews\">Reviews info</Link>\n//         </li>\n//       </ul>\n//       <Suspense fallback={<div><span className=\"loader\"></span></div>}>\n//         <Outlet /> {/* Отображаем дочерние компоненты, определенные в маршрутизации */}\n//       </Suspense>\n//     </>\n//   );\n// }\n\n// export default MovieDetails;\n\n// import React, { useRef, useState, useEffect } from 'react';\n// import { Outlet, useParams, useLocation, Link } from 'react-router-dom';\n// import { Suspense } from 'react';\n// import \"../Spinner/spinner.css\"\n// import { getMovieDetails } from 'services/Api'\n\n// function MovieDetails() {\n//   const location = useLocation();\n//   const backLinkLocationRef = useRef(location.state?.from ?? '/movies');\n//   const { movieId } = useParams();\n//   const [movieInfo, setMovieInfo] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchMovieDetails = async () => {\n//       try {\n//         const data = await getMovieDetails(movieId);\n//         setMovieInfo(data);\n//         setLoading(false);\n//       } catch (error) {\n//         setError(error);\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchMovieDetails();\n//   }, [movieId]);\n\n//   if (loading) {\n//     return <div>Loading...</div>;\n//   }\n\n//   if (error) {\n//     return <div>Error: {error.message}</div>;\n//   }\n\n//   return (\n//     <>\n//       <h2>MovieDetails: {movieId}</h2>\n//       <Link to={backLinkLocationRef.current}>Go back to movies collection</Link>\n//       <ul>\n//         <li>\n//           <Link to={`${movieId}/cast`}>Cast info</Link>\n//         </li>\n//         <li>\n//           <Link to={`${movieId}/reviews`}>Reviews info</Link>\n//         </li>\n//       </ul>\n//       <Suspense fallback={<div><span className=\"loader\"></span></div>}>\n//         <Outlet />\n//       </Suspense>\n//     </>\n//   );\n// }\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport { Outlet, useParams, useLocation, Link } from 'react-router-dom';\nimport { Suspense } from 'react';\nimport \"../Spinner/spinner.css\"\nimport { getMovieDetails } from 'services/Api'\nimport MovieCard from 'components/MovieCard/MovieCard';\n\nconst MovieDetails = () => {\n  const location = useLocation();\n  const backLinkLocation = useRef(location.state?.from ?? '/movies');\n  const { movieId } = useParams();\n  const [movieInfo, setMovieInfo] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      try {\n        const data = await getMovieDetails(movieId);\n        setMovieInfo(data);\n        setLoading(false);\n      } catch (error) {\n        setError(error);\n        setLoading(false);\n      }\n    };\n\n    fetchMovieDetails();\n  }, [movieId]);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  }\n\n  return (\n    <>\n      {/* <h2>MovieDetails: {movieId}</h2> */}\n      <div>\n      {/* <Link to=\"/movies\">Go Back</Link> */}\n      {/* Остальной код и компоненты страницы MovieDetails */}\n      <MovieCard movieInfo={movieInfo} />\n      {/* Остальной код и компоненты страницы MovieDetails */}\n    </div>\n      <Link to={backLinkLocation.current}>Go back </Link>\n      <ul>\n        {/* <li>\n          <Link to={`${movieId}/cast`}>Cast info</Link>\n        </li>\n        <li>\n          <Link to={`${movieId}/reviews`}>Reviews info</Link>\n        </li> */}\n      </ul>\n      <Suspense fallback={<div><span className=\"loader\"></span></div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n}\n\nexport default MovieDetails;","import axios from 'axios';\nconst API_KEY = 'a148ed5961285512fd3954af576af4a0';\n\n// популярное\nexport const getTrending = async () => {\n    const response = await axios.get('https://api.themoviedb.org/3/trending/movie/day', {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n      },\n      headers: {\n        Accept: 'application/json',\n      },\n    });\n    return response.data;\n  };\n\n//   запрос по ключевому слову\nexport const getMovies = async query => {\n    const response = await axios.get('https://api.themoviedb.org/3/search/movie', {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n        page: 1,\n        include_adult: false,\n        query: query,\n      },\n      headers: {\n        Accept: 'application/json',\n      },\n    });\n    return response.data;\n  };\n\n  // делати фильмов\n  export async function getMovieDetails(id) {\n    const url = `https://api.themoviedb.org/3/movie/${id}?language=en-US&api_key=${API_KEY}`;\n  \n    try {\n      const response = await axios.get(url, {\n        headers: {\n          Accept: 'application/json',\n        },\n      });\n  \n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n\n\n  export const getMovieCredits = async (movieId) => {\n    const url = `https://api.themoviedb.org/3/movie/${movieId}/credits`;\n    \n    try {\n      const response = await axios.get(url, {\n        params: {\n          api_key: API_KEY,\n          language: 'en-US',\n        },\n        headers: {\n          Accept: 'application/json',\n        },\n      });\n     \n      return response.data;\n      \n    } catch (error) {\n      throw error;\n    }\n  };\n  \n\n  export const getMovieReviews = async (movieId) => {\n    const url = `https://api.themoviedb.org/3/movie/${movieId}/reviews`;\n    \n    try {\n      const response = await axios.get(url, {\n        params: {\n          api_key: API_KEY,\n          language: 'en-US',\n          // page: 1,\n        },\n        headers: {\n          Accept: 'application/json',\n        },\n      });\n     \n      return response.data;\n      \n    } catch (error) {\n      throw error;\n    }\n  };"],"names":["MovieCardInfo","styled","Img","MovieTitle","Score","Title","AddInfo","CartNav","StyledNavLink","NavLink","Button","movieInfo","arrGenres","releaseDate","posterPath","poster_path","noImage","alt","title","src","width","release_date","Date","getFullYear","vote_average","overview","genres","map","genre","name","join","to","location","useLocation","backLinkLocation","useRef","state","from","movieId","useParams","useState","setMovieInfo","loading","setLoading","error","setError","useEffect","fetchMovieDetails","getMovieDetails","data","message","current","Suspense","fallback","className","API_KEY","getTrending","axios","params","api_key","language","headers","Accept","response","getMovies","query","page","include_adult","id","url","getMovieCredits","getMovieReviews"],"sourceRoot":""}