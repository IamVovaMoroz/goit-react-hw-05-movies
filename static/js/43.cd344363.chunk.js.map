{"version":3,"file":"static/js/43.cd344363.chunk.js","mappings":"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","sources":["components/MovieCard/MovieCard.styled.jsx","components/MovieCard/MovieCard.jsx","pages/MovieDetails.jsx","services/Api.jsx"],"sourcesContent":["// import styled from 'styled-components';\n// import { NavLink } from 'react-router-dom';\n\n// export const MovieCardInfo = styled.div`\n//   display: flex;\n//   flex-direction: row;\n//   padding-right: 30px;\n//   padding-left: 30px;\n//   padding-top: 30px;\n// `;\n// export const Img = styled.img`\n//   width: 300px;\n//   height: auto;\n//   object-fit: cover;\n//   display: block;\n//   margin-right: 20px;\n//   transition: transform 0.3s ease, box-shadow 0.3s ease;\n//   box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);\n\n//   &:hover {\n//     transform: scale(1.05);\n    \n//   }\n// `;\n\n// export const MovieTitle = styled.h1`\n//   font-size: 20px;\n//   font-weight: 800;\n//   margin-bottom: 10px;\n// `;\n// export const Score = styled.p`\n//   color: darkgrey;\n// `;\n// export const Title = styled.h3`\n//   font-size: 18px;\n//   font-weight: 800;\n//   margin-top: 10px;\n//   margin-bottom: 5px;\n// `;\n\n// export const AddInfo = styled.div`\n//   margin-top: 22px;\n// `;\n\n// export const CartNav = styled.nav`\n//   display: flex;\n// `;\n// export const StyledNavLink = styled(NavLink)`\n//   margin-right: 20px;\n//   text-transform: uppercase;\n// `;\n\n// export const Button = styled.button`\n//   font-size: 16px;\n//   text-transform: uppercase;\n//   width: 90px;\n//   margin-top: 10px;\n//   padding: 6px;\n//   /* padding-top: 4px;\n//   padding-bottom: 4px; */\n//   border: none;\n//   /* padding-right: 4px; */\n//   border-radius: 5px;\n//   background-color: #fff;\n//   cursor: pointer;\n//   position: relative;\n//   transition: color 0.3s;\n//   white-space: nowrap; \n//   border: 1px solid grey; \n  \n\n//   &:hover {\n//     color: grey;\n\n//     &::before {\n//       content: '';\n//       position: absolute;\n//       width: 100%;\n//       height: 3px;\n//       background-color: blue;\n//       bottom: -3px;\n//       left: 0;\n//       animation: underlineAnim 0.3s forwards;\n//     }\n//   }\n\n//   @keyframes underlineAnim {\n//     0% {\n//       width: 0;\n//     }\n//     100% {\n//       width: 100%;\n//     }\n//   }\n// `;\n\nimport styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const MovieCardInfo = styled.div`\n  display: flex;\n  flex-direction: row;\n  padding-right: 30px;\n  padding-left: 15px;\n  padding-top: 30px;\n  margin-top: 60px;\n`;\n\nexport const Img = styled.img`\n  width: 300px;\n  height: auto;\n  object-fit: cover;\n  display: block;\n  margin-right: 20px;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);\n\n  &:hover {\n    transform: scale(1.05);\n  }\n`;\n\nexport const MovieTitle = styled.h1`\n  font-size: 20px;\n  font-weight: 800;\n  margin-bottom: 10px;\n`;\n\nexport const Score = styled.p`\n  color: darkgrey;\n`;\n\nexport const Title = styled.h3`\n  font-size: 18px;\n  font-weight: 800;\n  margin-top: 10px;\n  margin-bottom: 5px;\n`;\n\nexport const AddInfo = styled.div`\n  margin-top: 22px;\n  position: relative;\n  height: 100px; /* Adjust the height as needed */\n`;\n\nexport const CartNav = styled.nav`\n  display: flex;\n`;\n\nexport const StyledNavLink = styled(NavLink)`\n  margin-right: 20px;\n  text-transform: uppercase;\n`;\n\nexport const Button = styled.button`\n  font-size: 16px;\n  text-transform: uppercase;\n  width: 90px;\n  margin-top: 10px;\n  padding: 6px;\n  border: none;\n  border-radius: 5px;\n  background-color: #fff;\n  cursor: pointer;\n  position: relative;\n  transition: color 0.3s;\n  white-space: nowrap;\n  border: 1px solid grey;\n\n  &:hover {\n    color: grey;\n\n    &::before {\n      content: '';\n      position: absolute;\n      width: 100%;\n      height: 3px;\n      background-color: blue;\n      bottom: -3px;\n      left: 0;\n      animation: underlineAnim 0.3s forwards;\n    }\n  }\n\n  @keyframes underlineAnim {\n    0% {\n      width: 0;\n    }\n    100% {\n      width: 100%;\n    }\n  }\n`;","\nimport React from 'react';\nimport {\n  MovieCardInfo,\n  Img,\n  MovieTitle,\n  Score,\n  Title,\n  AddInfo,\n  CartNav,\n  StyledNavLink,\n  Button,\n} from './MovieCard.styled';\nimport noImage from '../../NoImage.jpg';\n\nconst MovieCard = ({ movieInfo }) => {\n  if (!movieInfo) {\n    return null; // Возвращаем null, если movieInfo равно null или undefined\n  }\n\n  const getReleaseYear = (releaseDate) => {\n    const date = new Date(releaseDate);\n    return date.getFullYear();\n  };\n\n  const getGenres = (arrGenres) => {\n    return arrGenres.map((genre) => genre.name).join(', ');\n  };\n\n  const posterPath = movieInfo.poster_path\n    ? `https://image.tmdb.org/t/p/w500/${movieInfo.poster_path}`\n    : noImage;\n\n  return (\n    <div>\n      <div>\n        <MovieCardInfo>\n          <div>\n            <Img alt={movieInfo.title} src={posterPath} width={100} />\n          </div>\n\n          <div>\n            <MovieTitle>\n              {movieInfo.title}\n              <p>({getReleaseYear(movieInfo.release_date)})</p>\n            </MovieTitle>\n            <Score> User Score: {~~(movieInfo.vote_average * 10)}%</Score>\n            <Title>Overview</Title>\n            <p>{movieInfo.overview}</p>\n            <div>\n              <Title>Genres</Title>\n              <p>{getGenres(movieInfo.genres)}</p>\n            </div>\n\n            <AddInfo>\n              <Title>Additional Information</Title>\n              <CartNav>\n                <StyledNavLink to={`cast`}>\n                  <Button>Cast</Button>\n                </StyledNavLink>\n\n                <StyledNavLink to={`reviews`}>\n                  <Button>Reviews</Button>\n                </StyledNavLink>\n              </CartNav>\n            </AddInfo>\n          </div>\n        </MovieCardInfo>\n      </div>\n    </div>\n  );\n};\n\nexport default MovieCard;","\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport { Outlet, useParams, useLocation, Link } from 'react-router-dom';\nimport { Suspense } from 'react';\nimport \"../../src/components/Spinner/spinner.css\"\nimport { getMovieDetails } from 'services/Api'\nimport MovieCard from 'components/MovieCard/MovieCard';\n\nconst MovieDetails = () => {\n  const location = useLocation();\n  const backLinkLocation = useRef(location.state?.from ?? '/movies');\n  const { movieId } = useParams();\n  const [movieInfo, setMovieInfo] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      try {\n        const data = await getMovieDetails(movieId);\n        setMovieInfo(data);\n        setLoading(false);\n      } catch (error) {\n        setError(error);\n        setLoading(false);\n      }\n    };\n\n    fetchMovieDetails();\n  }, [movieId]);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  }\n\n  return (\n    <>\n      <Suspense fallback={<div><span className=\"loader\"></span></div>}>\n        <Outlet />\n      </Suspense>\n      <div>\n        <MovieCard movieInfo={movieInfo} />\n        <div style={{ display: 'flex', justifyContent: 'flex-start', marginLeft: '30px' }}>\n          <Link\n            to={backLinkLocation.current}\n            style={{\n              display: 'inline-block',\n              padding: '15px 30px', \n              backgroundColor: 'rgba(0, 121, 191, 0.8)',\n              color: 'white',\n              textDecoration: 'none',\n              borderRadius: '5px',\n              fontSize: '24px', \n              marginTop: '20px',\n              textTransform: 'uppercase', \n            }}\n          >\n            Go back\n          </Link>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default MovieDetails;\n\n\n\n\n// export default MovieDetails\n// import React, { useRef, useState, useEffect } from 'react';\n// import { Outlet, useParams, useLocation, Link } from 'react-router-dom';\n// import { Suspense } from 'react';\n// import \"../Spinner/spinner.css\"\n// import { getMovieDetails } from 'services/Api' // Импортируем функцию getMovieDetails из файла API (замените 'your-api-file' на правильный путь к вашему файлу)\n\n// function MovieDetails() {\n//   const location = useLocation();\n//   const backLinkLocationRef = useRef(location.state?.from ?? '/movies');\n//   const { movieId } = useParams();\n//   const [movieInfo, setMovieInfo] = useState(null); // Состояние для хранения информации о фильме\n//   const [loading, setLoading] = useState(false); // Состояние для отслеживания состояния загрузки\n//   const [error, setError] = useState(null); // Состояние для отслеживания ошибок\n\n//   useEffect(() => {\n//     const fetchMovieDetails = async () => {\n//       try {\n//         const data = await getMovieDetails(movieId); // Выполняем запрос на сервер для получения информации о фильме\n//         setMovieInfo(data); // Обновляем состояние с полученными данными\n//         setLoading(false); // Устанавливаем состояние загрузки на false, так как запрос выполнен успешно\n//       } catch (error) {\n//         setError(error); // Устанавливаем состояние ошибки \n//         setLoading(false); // Устанавливаем состояние загрузки на false, так как запрос завершился с ошибкой\n//       }\n//     };\n\n//     fetchMovieDetails(); // Вызываем функцию для выполнения запроса при монтировании компонента и при изменении ID фильма\n//   }, [movieId]);\n\n//   // Проверяем состояние загрузки и ошибки\n//   if (loading) {\n//     return <div>Loading...</div>; // Отображаем сообщение о загрузке, пока данные фильма загружаются\n//   }\n\n//   if (error) {\n//     return <div>Error: {error.message}</div>; // Отображаем сообщение об ошибке, если произошла ошибка при выполнении запроса\n//   }\n\n//   // Отображаем информацию о фильме и дочерние компоненты\n//   return (\n//     <>\n//       <h2>MovieDetails: {movieId}</h2>\n//       <Link to={backLinkLocationRef.current}>Go back to movies collection</Link>\n//       <ul>\n//         <li>\n//           <Link to=\"Cast\">Cast info</Link>\n//         </li>\n//         <li>\n//           <Link to=\"Reviews\">Reviews info</Link>\n//         </li>\n//       </ul>\n//       <Suspense fallback={<div><span className=\"loader\"></span></div>}>\n//         <Outlet /> {/* Отображаем дочерние компоненты, определенные в маршрутизации */}\n//       </Suspense>\n//     </>\n//   );\n// }\n\n// export default MovieDetails;\n","import axios from 'axios';\n\nconst API_KEY = 'a148ed5961285512fd3954af576af4a0';\n\nconst axiosInstance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  headers: {\n    Accept: 'application/json',\n  },\n});\n\nexport const getTrending = async () => {\n  try {\n    const response = await axiosInstance.get('/trending/movie/day', {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n      },\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMovies = async (query) => {\n  try {\n    const response = await axiosInstance.get('/search/movie', {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n        page: 1,\n        include_adult: false,\n        query: query,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMovieDetails = async (id) => {\n  try {\n    const response = await axiosInstance.get(`/movie/${id}`, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n      },\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMovieCredits = async (movieId) => {\n  try {\n    const response = await axiosInstance.get(`/movie/${movieId}/credits`, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n      },\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMovieReviews = async (movieId) => {\n  try {\n    const response = await axiosInstance.get(`/movie/${movieId}/reviews`, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n      },\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};"],"names":["MovieCardInfo","styled","Img","MovieTitle","Score","Title","AddInfo","CartNav","StyledNavLink","NavLink","Button","movieInfo","arrGenres","releaseDate","posterPath","poster_path","noImage","alt","title","src","width","release_date","Date","getFullYear","vote_average","overview","genres","map","genre","name","join","to","location","useLocation","backLinkLocation","useRef","state","from","movieId","useParams","useState","setMovieInfo","loading","setLoading","error","setError","useEffect","fetchMovieDetails","getMovieDetails","data","message","Suspense","fallback","className","style","display","justifyContent","marginLeft","current","padding","backgroundColor","color","textDecoration","borderRadius","fontSize","marginTop","textTransform","API_KEY","axiosInstance","axios","baseURL","headers","Accept","getTrending","get","params","api_key","language","response","getMovies","query","page","include_adult","id","getMovieCredits","getMovieReviews"],"sourceRoot":""}