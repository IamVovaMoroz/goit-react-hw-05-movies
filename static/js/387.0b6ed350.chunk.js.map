{"version":3,"file":"static/js/387.0b6ed350.chunk.js","mappings":"uRAGaA,EAAUC,EAAAA,EAAAA,IAAH,uEAKPC,EAAYD,EAAAA,EAAAA,IAAH,0pBAkCTE,EAAWF,EAAAA,EAAAA,GAAH,kHAQRG,EAAWH,EAAAA,EAAAA,GAAH,yCAoBRI,GAhBQJ,EAAAA,EAAAA,IAAH,oNAgBMA,EAAAA,EAAAA,IAAH,6lBA8BRK,EAAYL,EAAAA,EAAAA,EAAH,yFAMTM,EAAYN,EAAAA,EAAAA,EAAH,yF,SCxBtB,MAhEA,WACI,IAAOO,GAAWC,EAAAA,EAAAA,MAAXD,QACP,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAqBF,OAnBEC,EAAAA,EAAAA,YAAU,WACHT,IAGLM,GAAW,IACXI,EAAAA,EAAAA,IAAgBV,GACbW,MAAK,SAACC,GAELR,EAAQQ,EAAKT,KACd,IACAU,OAAM,SAACN,GACNC,EAASD,EACV,IACAO,SAAQ,WACPR,GAAW,EACZ,IACJ,GAAE,CAACN,KAIJ,yBAEIK,GACA,iBAAMU,UAAU,YAEhB,+BACE,UAACvB,EAAD,WACGe,IAAS,uBAAIA,KACd,SAACb,EAAD,UAAW,mBACX,SAACC,EAAD,UACGQ,EAAKa,KAAI,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,aAAcC,EAA5B,EAA4BA,KAAMC,EAAlC,EAAkCA,UAAlC,OACR,UAACxB,EAAD,YACE,+BACE,SAACC,EAAD,CACEwB,IACEH,EAAY,0CAC2BA,GACnCI,EAENC,IAAI,eAIR,SAACzB,EAAD,UAAYqB,KACZ,UAACpB,EAAD,WAAW,aAAWqB,OAbTH,EADP,YA0BvB,C,mMC9EKO,EAAU,mCAEVC,EAAgBC,EAAAA,EAAAA,OAAa,CACjCC,QAAS,+BACTC,QAAS,CACPC,OAAQ,sBAICC,EAAW,mCAAG,6GAEAL,EAAcM,IAAI,sBAAuB,CAC9DC,OAAQ,CACNC,QAAST,EACTU,SAAU,WALS,cAEjBC,EAFiB,yBAQhBA,EAASvB,MARO,oGAAH,qDAcXwB,EAAS,mCAAG,WAAOC,GAAP,gGAEEZ,EAAcM,IAAI,gBAAiB,CACxDC,OAAQ,CACNC,QAAST,EACTU,SAAU,QACVI,KAAM,EACNC,eAAe,EACfF,MAAOA,KARU,cAEfF,EAFe,yBAWdA,EAASvB,MAXK,oGAAH,sDAiBT4B,EAAe,mCAAG,WAAOC,GAAP,gGAEJhB,EAAcM,IAAd,iBAA4BU,GAAM,CACvDT,OAAQ,CACNC,QAAST,EACTU,SAAU,WALa,cAErBC,EAFqB,yBAQpBA,EAASvB,MARW,oGAAH,sDAcfF,EAAe,mCAAG,WAAOV,GAAP,gGAEJyB,EAAcM,IAAd,iBAA4B/B,EAA5B,YAA+C,CACpEgC,OAAQ,CACNC,QAAST,EACTU,SAAU,WALa,cAErBC,EAFqB,yBAQpBA,EAASvB,MARW,oGAAH,sDAcf8B,EAAe,mCAAG,WAAO1C,GAAP,gGAEJyB,EAAcM,IAAd,iBAA4B/B,EAA5B,YAA+C,CACpEgC,OAAQ,CACNC,QAAST,EACTU,SAAU,WALa,cAErBC,EAFqB,yBAQpBA,EAASvB,MARW,oGAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/Api.jsx"],"sourcesContent":["\nimport styled from '@emotion/styled';\n\nexport const Section = styled.div`\n  padding-right: 15px;\n  padding-left: 15px;\n`;\n\nexport const CastTitle = styled.div`\n  font-family: Helvetica Neue;\n  font-weight: 500;\n  font-size: 1.25rem;\n  letter-spacing: 0;\n  line-height: 1.2;\n  padding-left: 9px;\n  text-transform: uppercase;\n  margin-top: 10px;\n  padding-right: 10px;\n  margin-bottom: 1em;\n  position: relative;\n  cursor: pointer;\n  display: inline-block;\n\n  &::before {\n    position: absolute;\n    content: '';\n    height: 3px;\n    width: 100%;\n    bottom: 0;\n    left: 0;\n    background-color: blue;\n    transform: scaleX(0);\n    transform-origin: right;\n    transition: transform 0.3s;\n  }\n\n  &:hover::before {\n    transform: scaleX(1);\n    transform-origin: left;\n  }\n`;\n\nexport const CastList = styled.ul`\n  list-style: none;\n  padding: 0px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 60px;\n`;\n\nexport const CastItem = styled.li`\n  width: 190px;\n`;\n\nexport const Thumb = styled.div`\n  height: 255px;\n  width: 177px;\n  overflow: hidden;\n  position: relative;\n\n  &:hover img {\n    \n    filter: brightness(70%);\n    &::before {\n      opacity: 1;\n    \n    }\n  }\n`;\n\nexport const ActorImg = styled.img`\n  display: block;\n  height: 100%;\n  width: 100%;\n  object-fit: cover;\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);\n  transition: filter 0.3s;\n\n  &:hover {\n    transform: scale(1.03);\n    box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);}\n\n  &::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    opacity: 0;\n    background: linear-gradient(\n      to right,\n      rgba(255, 255, 255, 0.8) 0%,\n      rgba(255, 255, 255, 0.5) 50%,\n      rgba(255, 255, 255, 0) 80%\n    );\n    transition: opacity 0.3s;\n  }\n`;\n\nexport const ActorName = styled.p`\n  font-size: 14px;\n  font-weight: 600;\n  white-space: nowrap;\n`;\n\nexport const Character = styled.p`\n  font-size: 10px;\n  font-weight: 400;\n  white-space: nowrap;\n`;\n","\nimport { useParams } from 'react-router-dom'\nimport { useState, useEffect } from 'react';\nimport { getMovieCredits } from 'services/Api';\nimport noImage from '../../NoImage.jpg';\nimport \"../Spinner/spinner.css\"\nimport {\n  Section,\n  CastTitle,\n  CastList,\n  CastItem,\n  ActorImg,\n  ActorName,\n  Character,\n} from './Cast.styled';\n\n\n\nfunction Cast() {\n    const {movieId} = useParams()\n    const [cast, setCast] = useState([])\n    const [loading, setLoading] = useState(true)\n    const [error, setError] = useState(null)\n\n    useEffect(() => {\n      if (!movieId) {\n        return;\n      }\n      setLoading(true);\n      getMovieCredits(movieId)\n        .then((data) => {\n     \n          setCast(data.cast);\n        })\n        .catch((error) => {\n          setError(error);\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    }, [movieId]);\n\n\n  return (\n    <div>\n       \n       {loading ? (\n        <span className=\"loader\"></span>\n      ) : (\n        <>\n          <Section>\n            {error && <p>{error}</p>}\n            <CastTitle>Cast and Crew</CastTitle>\n            <CastList>\n              {cast.map(({ credit_id, profile_path, name, character }) => (\n                <CastItem key={credit_id}>\n                  <>\n                    <ActorImg\n                      src={\n                        profile_path\n                          ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                          : noImage\n                      }\n                      alt=\"preview\"\n                    />\n                  </>\n\n                  <ActorName>{name}</ActorName>\n                  <Character>Character:{character}</Character>\n                </CastItem>\n              ))}\n            </CastList>\n          </Section>\n        </>\n      )}\n    </div>\n\n\n\n  )\n}\n\nexport default Cast\n\n","import axios from 'axios';\n\nconst API_KEY = 'a148ed5961285512fd3954af576af4a0';\n\nconst axiosInstance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  headers: {\n    Accept: 'application/json',\n  },\n});\n\nexport const getTrending = async () => {\n  try {\n    const response = await axiosInstance.get('/trending/movie/day', {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n      },\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMovies = async (query) => {\n  try {\n    const response = await axiosInstance.get('/search/movie', {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n        page: 1,\n        include_adult: false,\n        query: query,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMovieDetails = async (id) => {\n  try {\n    const response = await axiosInstance.get(`/movie/${id}`, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n      },\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMovieCredits = async (movieId) => {\n  try {\n    const response = await axiosInstance.get(`/movie/${movieId}/credits`, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n      },\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMovieReviews = async (movieId) => {\n  try {\n    const response = await axiosInstance.get(`/movie/${movieId}/reviews`, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n      },\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};"],"names":["Section","styled","CastTitle","CastList","CastItem","ActorImg","ActorName","Character","movieId","useParams","useState","cast","setCast","loading","setLoading","error","setError","useEffect","getMovieCredits","then","data","catch","finally","className","map","credit_id","profile_path","name","character","src","noImage","alt","API_KEY","axiosInstance","axios","baseURL","headers","Accept","getTrending","get","params","api_key","language","response","getMovies","query","page","include_adult","getMovieDetails","id","getMovieReviews"],"sourceRoot":""}